rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // Helper function to check if user is authenticated
    function isAuthenticated() {
      return request.auth != null;
    }

    // Helper function to check if the user is the owner of the resource (based on a userId field)
    function isOwner(userId) {
      return request.auth.uid == userId;
    }

    // Helper function to validate that the userId in the data matches the authenticated user
    function isValidUserData(data) {
      return data.userId == request.auth.uid;
    }

    // Persons Collection
    match /persons/{personId} {
      allow read: if isAuthenticated() && isOwner(resource.data.userId);
      allow create: if isAuthenticated() &&
                       isValidUserData(request.resource.data) &&
                       request.resource.data.name is string &&
                       request.resource.data.name.size() > 0 &&
                       request.resource.data.name.size() < 100 &&
                       request.resource.data.orderIndex is number;
      allow update: if isAuthenticated() && isOwner(resource.data.userId) &&
                       // userId cannot change
                       request.resource.data.userId == resource.data.userId &&
                       // Validate name ONLY IF it's being updated
                       (!request.resource.data.diff(resource.data).affectedKeys().has('name') ||
                        (request.resource.data.name is string && request.resource.data.name.size() > 0 && request.resource.data.name.size() < 100)) &&
                       // Validate orderIndex ONLY IF it's being updated
                       (!request.resource.data.diff(resource.data).affectedKeys().has('orderIndex') ||
                        (request.resource.data.orderIndex is number)) &&
                       // Ensure only 'name' and 'orderIndex' are in the set of changed fields
                       request.resource.data.diff(resource.data).affectedKeys().difference(['name', 'orderIndex'].toSet()).size() == 0;
      allow delete: if isAuthenticated() && isOwner(resource.data.userId);
    }

    // ResturlaubData Collection - Doc ID: {userId}_{personId}_{forYear}
    match /resturlaubData/{docId} {
      allow read: if isAuthenticated() && isOwner(resource.data.userId);
      allow create: if isAuthenticated() &&
                       isValidUserData(request.resource.data) &&
                       request.resource.data.personId is string &&
                       request.resource.data.forYear is number &&
                       request.resource.data.tage is number && request.resource.data.tage >= 0 &&
                       docId == request.auth.uid + "_" + request.resource.data.personId + "_" + request.resource.data.forYear;
      allow update: if isAuthenticated() && isOwner(resource.data.userId) &&
                       // Key fields cannot change
                       request.resource.data.userId == resource.data.userId &&
                       request.resource.data.personId == resource.data.personId &&
                       request.resource.data.forYear == resource.data.forYear &&
                       // Validate tage ONLY IF it's being updated
                       (!request.resource.data.diff(resource.data).affectedKeys().has('tage') ||
                        (request.resource.data.tage is number && request.resource.data.tage >= 0)) &&
                       request.resource.data.diff(resource.data).affectedKeys().difference(['tage'].toSet()).size() == 0;
      allow delete: if isAuthenticated() && isOwner(resource.data.userId);
    }

    // EmploymentData Collection - Doc ID: {userId}_{personId}_{forYear}
    match /employmentData/{docId} {
      allow read: if isAuthenticated() && isOwner(resource.data.userId);
      allow create: if isAuthenticated() &&
                       isValidUserData(request.resource.data) &&
                       request.resource.data.personId is string &&
                       request.resource.data.forYear is number &&
                       request.resource.data.type is string && (request.resource.data.type == 'full-time' || request.resource.data.type == 'part-time') &&
                       request.resource.data.percentage is number && request.resource.data.percentage >= 0 && request.resource.data.percentage <= 100 &&
                       ( (request.resource.data.type == 'full-time' && request.resource.data.daysPerWeek == null) ||
                         (request.resource.data.type == 'part-time' && request.resource.data.daysPerWeek is number && request.resource.data.daysPerWeek >= 1 && request.resource.data.daysPerWeek <= 5)
                       ) &&
                       docId == request.auth.uid + "_" + request.resource.data.personId + "_" + request.resource.data.forYear;
      allow update: if isAuthenticated() && isOwner(resource.data.userId) &&
                       // Key fields cannot change
                       request.resource.data.userId == resource.data.userId &&
                       request.resource.data.personId == resource.data.personId &&
                       request.resource.data.forYear == resource.data.forYear &&
                       // Validate 'type' ONLY IF it's being updated
                       (!request.resource.data.diff(resource.data).affectedKeys().has('type') ||
                         (request.resource.data.type is string && (request.resource.data.type == 'full-time' || request.resource.data.type == 'part-time'))) &&
                       // Validate 'percentage' ONLY IF it's being updated
                       (!request.resource.data.diff(resource.data).affectedKeys().has('percentage') ||
                         (request.resource.data.percentage is number && request.resource.data.percentage >= 0 && request.resource.data.percentage <= 100 &&
                           // Percentage must be 100 if effective type is full-time
                           ( ( (('type' in request.resource.data) ? request.resource.data.type : resource.data.type) == 'full-time' && request.resource.data.percentage == 100 ) ||
                             ( (('type' in request.resource.data) ? request.resource.data.type : resource.data.type) == 'part-time' )
                           )
                         )) &&
                       // Validate 'daysPerWeek' ONLY IF it's being updated
                       (!request.resource.data.diff(resource.data).affectedKeys().has('daysPerWeek') ||
                         (
                           ( ( ('type' in request.resource.data) ? request.resource.data.type : resource.data.type ) == 'full-time' && request.resource.data.daysPerWeek == null) ||
                           ( ( ('type' in request.resource.data) ? request.resource.data.type : resource.data.type ) == 'part-time' && request.resource.data.daysPerWeek is number && request.resource.data.daysPerWeek >= 1 && request.resource.data.daysPerWeek <= 5)
                         )
                       ) &&
                       // Ensure only allowed fields are changed
                       request.resource.data.diff(resource.data).affectedKeys().difference(['type', 'percentage', 'daysPerWeek'].toSet()).size() == 0;
      allow delete: if isAuthenticated() && isOwner(resource.data.userId);
    }

    // YearConfigurations Collection - Doc ID: {userId}_{year}
    match /yearConfigurations/{docId} {
      allow read: if isAuthenticated() && isOwner(resource.data.userId);
      allow create: if isAuthenticated() &&
                       isValidUserData(request.resource.data) &&
                       request.resource.data.year is number &&
                       request.resource.data.urlaubsanspruch is number && request.resource.data.urlaubsanspruch >= 0 &&
                       docId == request.auth.uid + "_" + request.resource.data.year;
      allow update: if isAuthenticated() && isOwner(resource.data.userId) &&
                       // Key fields cannot change
                       request.resource.data.userId == resource.data.userId &&
                       request.resource.data.year == resource.data.year &&
                       // Validate urlaubsanspruch ONLY IF it's being updated
                       (!request.resource.data.diff(resource.data).affectedKeys().has('urlaubsanspruch') ||
                        (request.resource.data.urlaubsanspruch is number && request.resource.data.urlaubsanspruch >= 0)) &&
                       request.resource.data.diff(resource.data).affectedKeys().difference(['urlaubsanspruch'].toSet()).size() == 0;
      allow delete: if isAuthenticated() && isOwner(resource.data.userId);
    }

    // DayStatusEntries Collection - Doc ID: {userId}_{personId}-{year}-{month}-{day}
    match /dayStatusEntries/{docId} {
      allow read: if isAuthenticated() && isOwner(resource.data.userId);
      allow create: if isAuthenticated() &&
                       isValidUserData(request.resource.data) &&
                       request.resource.data.personId is string &&
                       request.resource.data.year is number &&
                       request.resource.data.month is number && request.resource.data.month >= 0 && request.resource.data.month <= 11 &&
                       request.resource.data.day is number && request.resource.data.day >= 1 && request.resource.data.day <= 31 &&
                       request.resource.data.status is string && ['urlaub', 'durchfuehrung', 'fortbildung', 'interne teamtage', 'feiertag'].hasAny([request.resource.data.status]) &&
                       docId == request.auth.uid + "_" + request.resource.data.personId + "-" + request.resource.data.year + "-" + request.resource.data.month + "-" + request.resource.data.day;
      allow update: if isAuthenticated() && isOwner(resource.data.userId) &&
                       // Key fields cannot change
                       request.resource.data.userId == resource.data.userId &&
                       request.resource.data.personId == resource.data.personId &&
                       request.resource.data.year == resource.data.year &&
                       request.resource.data.month == resource.data.month &&
                       request.resource.data.day == resource.data.day &&
                       // Validate status ONLY IF it's being updated
                       (!request.resource.data.diff(resource.data).affectedKeys().has('status') ||
                        (request.resource.data.status is string && ['urlaub', 'durchfuehrung', 'fortbildung', 'interne teamtage', 'feiertag'].hasAny([request.resource.data.status]))) &&
                       request.resource.data.diff(resource.data).affectedKeys().difference(['status'].toSet()).size() == 0;
      allow delete: if isAuthenticated() && isOwner(resource.data.userId);
    }

    // GlobalDaySettings Collection - Doc ID: {userId}_{year}-{month}-{day}
    match /globalDaySettings/{docId} {
      allow read: if isAuthenticated() && isOwner(resource.data.userId);
      allow create: if isAuthenticated() &&
                       isValidUserData(request.resource.data) &&
                       request.resource.data.year is number &&
                       request.resource.data.month is number && request.resource.data.month >= 0 && request.resource.data.month <= 11 &&
                       request.resource.data.day is number && request.resource.data.day >= 1 && request.resource.data.day <= 31 &&
                       request.resource.data.status is string && ['interne teamtage', 'feiertag'].hasAny([request.resource.data.status]) && // Only these two for global
                       docId == request.auth.uid + "_" + request.resource.data.year + "-" + request.resource.data.month + "-" + request.resource.data.day;
      allow update: if isAuthenticated() && isOwner(resource.data.userId) &&
                       // Key fields cannot change
                       request.resource.data.userId == resource.data.userId &&
                       request.resource.data.year == resource.data.year &&
                       request.resource.data.month == resource.data.month &&
                       request.resource.data.day == resource.data.day &&
                       // Validate status ONLY IF it's being updated
                       (!request.resource.data.diff(resource.data).affectedKeys().has('status') ||
                        (request.resource.data.status is string && ['interne teamtage', 'feiertag'].hasAny([request.resource.data.status]))) &&
                       request.resource.data.diff(resource.data).affectedKeys().difference(['status'].toSet()).size() == 0;
      allow delete: if isAuthenticated() && isOwner(resource.data.userId);
    }

    // Default deny all other paths not explicitly matched above
    match /{path=**} {
      allow read, write: if false;
    }
  }
}
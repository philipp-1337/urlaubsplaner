rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    function isSignedIn() {
      return request.auth != null;
    }

    function isOwner() {
      return isSignedIn() && request.auth.uid == resource.data.userId;
    }

    function isSelfWrite() {
      return isSignedIn() && request.auth.uid == request.resource.data.userId;
    }

    // Beispiel: Pflichtfelder f√ºr Personen
    function validPerson() {
      return request.resource.data.keys().hasAll(['userId', 'name'])
        && request.resource.data.userId is string
        && request.resource.data.name is string;
    }

    match /persons/{personId} {
      allow read, delete: if isOwner();
      allow create: if isSelfWrite() && validPerson();
      allow update: if isOwner()
        && request.resource.data.userId == resource.data.userId
        && validPerson();
    }

    match /resturlaubData/{resturlaubId} {
      allow read: if (
        (resource.data.userId != null && isSignedIn() && request.auth.uid == resource.data.userId) ||
        (resource.data.userId == null && isSignedIn() && (
          resturlaubId.matches('^' + request.auth.uid + '_.*$') ||
          // Support legacy IDs with dash as separator (for backward compatibility)
          resturlaubId.matches('^' + request.auth.uid + '-.*$')
        ))
      );
      allow delete: if isSignedIn() && request.auth.uid == resource.data.userId;
      allow create: if isSignedIn() && request.auth.uid == request.resource.data.userId;
      allow update: if isSignedIn()
        && request.auth.uid == resource.data.userId
        && request.resource.data.userId == resource.data.userId;
    }

    match /employmentData/{employmentId} {
      allow read, delete: if isOwner();
      allow create: if isSelfWrite();
      allow update: if isOwner()
        && request.resource.data.userId == resource.data.userId;
    }

    match /yearConfigurations/{yearConfigId} {
      allow read, delete: if isOwner();
      allow create: if isSelfWrite();
      allow update: if isOwner()
        && request.resource.data.userId == resource.data.userId;
    }

    match /dayStatusEntries/{entryId} {
      allow read: if (
        (resource.data.userId != null && isSignedIn() && request.auth.uid == resource.data.userId) ||
        (resource.data.userId == null && isSignedIn() && entryId.matches('^' + request.auth.uid + '_.*$'))
      );
      allow delete: if isSignedIn() && request.auth.uid == resource.data.userId;
      allow create: if isSignedIn() && request.auth.uid == request.resource.data.userId;
      allow update: if isSignedIn()
        && request.auth.uid == resource.data.userId
        && request.resource.data.userId == resource.data.userId;
    }

    match /globalDaySettings/{globalDayId} {
      allow read, create, update, delete: if isSignedIn();
    }
  }
}
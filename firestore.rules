rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    function isSignedIn() {
      return request.auth != null;
    }

    function isOwner() {
      return isSignedIn() && request.auth.uid == resource.data.userId;
    }

    function isSelfWrite() {
      return isSignedIn() && request.auth.uid == request.resource.data.userId;
    }

    // Funktion, um zu prüfen, ob der anfragende Benutzer der Besitzer des Dokuments ist
    // Prüft sowohl die userId im Dokument als auch die UID im request.auth
    function isOwnerOfGlobalSetting() {
      return isSignedIn() 
             && resource.data.userId == request.auth.uid;
    }
    
    // Funktion, um zu prüfen, ob die eingehenden Daten dem anfragenden Benutzer gehören
    function isSelfWriteGlobalSetting() {
       return isSignedIn()
              && request.resource.data.userId == request.auth.uid;
    }
    // Beispiel: Pflichtfelder für Personen
    function validPerson() {
      return request.resource.data.keys().hasAll(['userId', 'name'])
        && request.resource.data.userId is string
        && request.resource.data.name is string;
    }

    match /persons/{personId} {
      allow read, delete: if isOwner();
      allow create: if isSelfWrite() && validPerson();
      allow update: if isOwner()
        && request.resource.data.userId == resource.data.userId
        && validPerson();
    }

    match /resturlaubData/{resturlaubId} {
      allow read: if (
        (resource.data.userId != null && isSignedIn() && request.auth.uid == resource.data.userId) ||
        (resource.data.userId == null && isSignedIn() && (
          resturlaubId.matches('^' + request.auth.uid + '_.*$') ||
          resturlaubId.matches('^' + request.auth.uid + '-.*$')
        ))
      );
      allow get: if (
        (resource.data.userId != null && isSignedIn() && request.auth.uid == resource.data.userId) ||
        (resource.data.userId == null && isSignedIn() && (
          resturlaubId.matches('^' + request.auth.uid + '_.*$') ||
          resturlaubId.matches('^' + request.auth.uid + '-.*$')
        ))
      );
      allow delete: if isSignedIn() && request.auth.uid == resource.data.userId;
      allow create: if isSignedIn() && request.auth.uid == request.resource.data.userId;
      allow update: if isSignedIn()
        && request.auth.uid == resource.data.userId
        && request.resource.data.userId == resource.data.userId;
    }

    match /employmentData/{employmentId} {
      allow read: if (
        (resource.data.userId != null && isSignedIn() && request.auth.uid == resource.data.userId) ||
        (resource.data.userId == null && isSignedIn() && (
          employmentId.matches('^' + request.auth.uid + '_.*$') ||
          employmentId.matches('^' + request.auth.uid + '-.*$')
        ))
      );
      allow get: if (
        (resource.data.userId != null && isSignedIn() && request.auth.uid == resource.data.userId) ||
        (resource.data.userId == null && isSignedIn() && (
          employmentId.matches('^' + request.auth.uid + '_.*$') ||
          employmentId.matches('^' + request.auth.uid + '-.*$')
        ))
      );
      allow delete: if isSignedIn() && request.auth.uid == resource.data.userId;
      allow create: if isSignedIn() && request.auth.uid == request.resource.data.userId;
      allow update: if isSignedIn()
        && request.auth.uid == resource.data.userId
        && request.resource.data.userId == resource.data.userId;
    }

    match /yearConfigurations/{yearConfigId} {
      allow read, delete: if isOwner();
      allow create: if isSelfWrite();
      allow update: if isOwner()
        && request.resource.data.userId == resource.data.userId;
    }

    match /dayStatusEntries/{entryId} {
      allow read: if (
        (resource.data.userId != null && isSignedIn() && request.auth.uid == resource.data.userId) ||
        (resource.data.userId == null && isSignedIn() && (
          entryId.matches('^' + request.auth.uid + '_.*$') ||
          entryId.matches('^' + request.auth.uid + '-.*$')
        ))
      );
      allow get: if (
        (resource.data.userId != null && isSignedIn() && request.auth.uid == resource.data.userId) ||
        (resource.data.userId == null && isSignedIn() && (
          entryId.matches('^' + request.auth.uid + '_.*$') ||
          entryId.matches('^' + request.auth.uid + '-.*$')
        ))
      ); 
      allow delete: if isSignedIn() && request.auth.uid == resource.data.userId;
      allow create: if isSignedIn() && request.auth.uid == request.resource.data.userId;
      allow update: if isSignedIn()
        && request.auth.uid == resource.data.userId
        && request.resource.data.userId == resource.data.userId;
    }

    match /globalDaySettings/{globalDayId} {
      // Lesen erlauben, wenn der Benutzer angemeldet ist UND die userId im Dokument seiner UID entspricht
      allow read: if isSignedIn() && resource.data.userId == request.auth.uid;
      
      // Erstellen, Aktualisieren und Löschen erlauben, wenn der Benutzer der Besitzer ist
      // Für create/update wird zusätzlich geprüft, ob die eingehenden Daten die korrekte userId haben
      // Die ID-Prüfung in create/update ist optional, aber erhöht die Sicherheit
      allow create, update, delete: if isOwnerOfGlobalSetting() && isSelfWriteGlobalSetting();
    }
  }
}